




{"version":3,"sources":["spy.png","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","parseNames","leftNote","document","getElementById","availableTargets","textContent","split","newList","Assassin","pop","trim","first","length","randomNum","Math","floor","random","console","log","chosenTarget","splice","App","className","id","style","position","top","left","height","width","right","paddingTop","src","spy","alt","onClick","color","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,iC,uECA3CD,EAAOC,QAAU,IAA0B,kC,6HCU3C,SAASC,IAcL,IAZA,IAAIC,EAAWC,SAASC,eAAe,kBAInCC,EAAmBH,EAASI,YAAYC,MAAM,KAE9CC,EAAU,GAEVC,EAAWJ,EAAiBK,MAAMC,OAElCC,EAAQH,EAELJ,EAAiBQ,OAAS,GAAG,CAEhC,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAiBQ,QAE5DK,QAAQC,IAAI,aAAeL,GAE3B,IAAIM,EAAef,EAAiBS,GAAWH,OAE/CN,EAAiBgB,OAAOP,EAAW,GAEnCN,GAAWC,EAAW,UAAYW,EAAe,QAEjDX,EAAWW,EAIfZ,GAAWC,EAAW,UAAYG,EAElCV,EAASI,YAAcE,EAuCZc,MAlCf,WAEI,OAEI,yBAAKC,UAAU,OAEX,4BAAQA,UAAU,eAIlB,6BAEI,8BAAUC,GAAG,iBAAiBC,MAAO,CAAEC,SAAU,WAAYC,IAAK,MAAOC,KAAM,MAAOC,OAAQ,MAAOC,MAAO,SAE5G,yBAAKL,MAAO,CAAEC,SAAU,WAAYC,IAAK,MAAOI,MAAO,MAAOD,MAAO,MAAOE,WAAY,MAAQC,IAAKC,IAAKC,IAAI,mBAE9G,4BAAQC,QAASnC,EAAYwB,MAAO,CAAEC,SAAU,WAAYC,IAAK,MAAOI,MAAO,MAAOF,OAAQ,KAAMC,MAAO,QAA3G,oBAEA,uBAAGL,MAAO,CAAEY,MAAO,QAASX,SAAU,WAAYC,IAAK,MAAOC,KAAM,KAAME,MAAO,MAAOQ,SAAU,QAAlG,oGCrDIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1C,SAASC,eAAe,SD2H3C,kBAAmB0C,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dd7325ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"./static/media/spy.2e6c07e6.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport { userState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport spy from './spy.png';\r\n\r\n\r\n\r\n\r\n\r\nfunction parseNames() {\r\n\r\n    let leftNote = document.getElementById(\"note-text-area\");\r\n\r\n\r\n\r\n    let availableTargets = leftNote.textContent.split(',');\r\n\r\n    let newList = \"\";\r\n\r\n    let Assassin = availableTargets.pop().trim();\r\n\r\n    let first = Assassin;\r\n\r\n    while (availableTargets.length > 0) {\r\n\r\n        let randomNum = Math.floor(Math.random() * availableTargets.length);\r\n\r\n        console.log(\"randomNum:\" + randomNum);\r\n\r\n        let chosenTarget = availableTargets[randomNum].trim();\r\n\r\n        availableTargets.splice(randomNum, 1);\r\n\r\n        newList += Assassin + \" kills \" + chosenTarget + \",\\n\\r\";\r\n\r\n        Assassin = chosenTarget;\r\n\r\n    }\r\n\r\n    newList += Assassin + \" kills \" + first;\r\n\r\n    leftNote.textContent = newList;\r\n\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n\r\n            <header className=\"App-header\">\r\n\r\n            </header>\r\n\r\n            <div>\r\n\r\n                <textarea id=\"note-text-area\" style={{ position: \"absolute\", top: \"0px\", left: \"0px\", height: \"50%\", width: \"50%\", }} />\r\n\r\n                <img style={{ position: \"absolute\", top: \"10%\", right: \"15%\", width: \"15%\", paddingTop: \"0%\" }} src={spy} alt=\"Image missing!\" />         \r\n\r\n                <button onClick={parseNames} style={{ position: \"absolute\", top: \"45%\", right: \"12%\", height: \"5%\", width: \"20%\" }} >KILL Assignments</button>\r\n\r\n                <p style={{ color: \"white\", position: \"absolute\", top: \"55%\", left: \"1%\", width: \"50%\", fontSize: \"2vw\", }}>\r\n\r\n                    Enter in names separated by a comma. Then click the button and let the assassins get to work!\r\n\r\n                </p>    \r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}